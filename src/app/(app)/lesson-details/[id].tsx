import HomeLayout from "@components/layouts/HomeLayout";
import { ThemedText } from "@components/ThemedText";
import { IconSymbol } from "@components/ui/IconSymbol";
import { Skeleton } from "@components/ui/Skeleton";
import { useLesson } from "@hooks/useLessons"; // Assuming this hook fetches real data
import { router, useLocalSearchParams } from "expo-router";
import React from "react";
import { useTranslation } from "react-i18next";
import { Alert, ScrollView, TouchableOpacity, View } from "react-native";

// --- Mock Data (Keep for fallback/example) ---
const mockLessonContent = {
  // ... (keep your existing mock data)
  vocabulary: {
    title: "T·ª´ v·ª±ng c∆° b·∫£n",
    words: [
      {
        japanese: "„Åì„Çì„Å´„Å°„ÅØ",
        romaji: "konnichiwa",
        vietnamese: "Xin ch√†o",
        example: "„Åì„Çì„Å´„Å°„ÅØ„ÄÅÁî∞‰∏≠„Åï„Çì",
      },
      {
        japanese: "„ÅÇ„Çä„Åå„Å®„ÅÜ",
        romaji: "arigatou",
        vietnamese: "C·∫£m ∆°n",
        example: "„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô",
      },
      {
        japanese: "„Åô„Åø„Åæ„Åõ„Çì",
        romaji: "sumimasen",
        vietnamese: "Xin l·ªói",
        example: "„Åô„Åø„Åæ„Åõ„Çì„ÄÅÈÅÖ„Çå„Åæ„Åó„Åü",
      },
      {
        japanese: "„ÅØ„ÅÑ",
        romaji: "hai",
        vietnamese: "V√¢ng/C√≥",
        example: "„ÅØ„ÅÑ„ÄÅ„Åù„ÅÜ„Åß„Åô",
      },
      {
        japanese: "„ÅÑ„ÅÑ„Åà",
        romaji: "iie",
        vietnamese: "Kh√¥ng",
        example: "„ÅÑ„ÅÑ„Åà„ÄÅÈÅï„ÅÑ„Åæ„Åô",
      },
    ],
  },
  grammar: {
    title: "Ng·ªØ ph√°p c∆° b·∫£n",
    points: [
      {
        title: "C√¢u kh·∫≥ng ƒë·ªãnh v·ªõi „Åß„Åô",
        explanation: "„Åß„Åô ƒë∆∞·ª£c d√πng ƒë·ªÉ t·∫°o c√¢u kh·∫≥ng ƒë·ªãnh l·ªãch s·ª±",
        example: "ÁßÅ„ÅØÂ≠¶Áîü„Åß„Åô (T√¥i l√† h·ªçc sinh)",
        pattern: "Danh t·ª´ + „Åß„Åô",
      },
      {
        title: "C√¢u ph·ªß ƒë·ªãnh v·ªõi „Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì",
        explanation: "„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì l√† d·∫°ng ph·ªß ƒë·ªãnh c·ªßa „Åß„Åô",
        example: "ÁßÅ„ÅØÂÖàÁîü„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì (T√¥i kh√¥ng ph·∫£i l√† gi√°o vi√™n)",
        pattern: "Danh t·ª´ + „Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì",
      },
      {
        title: "C√¢u h·ªèi v·ªõi „Åã",
        explanation: "„Åã ƒë∆∞·ª£c th√™m v√†o cu·ªëi c√¢u ƒë·ªÉ t·∫°o c√¢u h·ªèi",
        example: "„ÅÇ„Å™„Åü„ÅØÂ≠¶Áîü„Åß„Åô„ÅãÔºü (B·∫°n c√≥ ph·∫£i l√† h·ªçc sinh kh√¥ng?)",
        pattern: "C√¢u + „Åã",
      },
    ],
  },
  kanji: {
    title: "Kanji c∆° b·∫£n",
    characters: [
      {
        kanji: "‰∫∫",
        meaning: "Ng∆∞·ªùi",
        reading: "„Å≤„Å®",
        examples: ["Êó•Êú¨‰∫∫ (ng∆∞·ªùi Nh·∫≠t)", "Â§ß‰∫∫ (ng∆∞·ªùi l·ªõn)"],
      },
      {
        kanji: "Â§ß",
        meaning: "L·ªõn",
        reading: "„Åä„Åä",
        examples: ["Â§ß„Åç„ÅÑ (to l·ªõn)", "Â§ßÂ≠¶ (ƒë·∫°i h·ªçc)"],
      },
      {
        kanji: "Â∞è",
        meaning: "Nh·ªè",
        reading: "„Å°„ÅÑ",
        examples: ["Â∞è„Åï„ÅÑ (nh·ªè)", "Â∞èÂ≠¶Áîü (h·ªçc sinh ti·ªÉu h·ªçc)"],
      },
      {
        kanji: "Â≠¶",
        meaning: "H·ªçc",
        reading: "„Åå„Åè",
        examples: ["Â≠¶Áîü (h·ªçc sinh)", "Â≠¶Ê†° (tr∆∞·ªùng h·ªçc)"],
      },
    ],
  },
};

const LessonDetailScreen = () => {
  const { t } = useTranslation();
  const { id } = useLocalSearchParams<{ id: string }>();
  const { data: lessonData, isLoading } = useLesson(id || ""); // Use your actual hook

  // Use real data if available, otherwise fallback to mock data
  const lesson = lessonData?.data; // Modify this based on your actual data structure
  const lessonContent = mockLessonContent; // Use mock data for now

  // --- Alert Handling ---
  const showAlert = (title: string, message: string) => {
    Alert.alert(title, message, [
      {
        text: "H·ªßy",
        style: "cancel"
      },
      {
        text: "B·∫Øt ƒë·∫ßu",
        onPress: () => {
          // Add navigation logic here if needed
          console.log("User confirmed:", title);
        }
      }
    ]);
  };

  const handleTestVocabulary = () => {
    showAlert("Ki·ªÉm tra T·ª´ v·ª±ng", "B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra t·ª´ v·ª±ng?");
  };

  const handleTestGrammar = () => {
    showAlert("Ki·ªÉm tra Ng·ªØ ph√°p", "B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra ng·ªØ ph√°p?");
  };

  const handleTestKanji = () => {
    showAlert("Ki·ªÉm tra Kanji", "B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra Kanji?");
  };

  const handleFinalTest = () => {
    showAlert("Ki·ªÉm tra T·ªïng h·ª£p", "B·∫°n c√≥ mu·ªën b·∫Øt ƒë·∫ßu b√†i ki·ªÉm tra t·ªïng h·ª£p cho b√†i h·ªçc n√†y?");
  };

  // --- Loading State ---
  if (isLoading) {
    return (
      <HomeLayout>
        <View className="p-4">
          <ThemedText type="title" className="mb-6 text-center text-gray-800">
            üìö {t("lessons.title")}
          </ThemedText>
          <Skeleton className="h-8 w-3/4 mb-4 rounded" />
          <Skeleton className="h-4 w-full mb-2 rounded" />
          <Skeleton className="h-4 w-2/3 mb-6 rounded" />
          <Skeleton className="h-40 w-full mb-6 rounded-lg" />
          <Skeleton className="h-32 w-full mb-6 rounded-lg" />
        </View>
      </HomeLayout>
    );
  }

  // --- Error State ---
  // if (error || !lesson) { // Check for lesson data presence
  //   return (
  //     <HomeLayout>
  //       <View className="p-4">
  //         <ThemedText type="title" className="mb-6 text-center text-gray-800">
  //           üìö {t("lessons.title")}
  //         </ThemedText>
  //         <ErrorState
  //           title="Kh√¥ng th·ªÉ t·∫£i b√†i h·ªçc"
  //           description="ƒê√£ x·∫£y ra l·ªói khi t·∫£i n·ªôi dung b√†i h·ªçc. Vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi m·∫°ng ho·∫∑c th·ª≠ l·∫°i sau."
  //           error={error?.message || "Kh√¥ng t√¨m th·∫•y b√†i h·ªçc"}
  //           onRetry={() => router.back()} // Consider a refresh function if applicable
  //           retryText="Quay l·∫°i"
  //         />
  //       </View>
  //     </HomeLayout>
  //   );
  // }

  // --- Render Content Sections ---
  const renderVocabularyContent = () => (
    <View className="mb-4">
      {/* <ThemedText className="text-lg font-semibold text-gray-700 mb-3">
        üìö {lessonContent.vocabulary.title}
      </ThemedText> */}
      {lessonContent.vocabulary.words.map((word: any, index: number) => (
        <View
          key={index}
          className="bg-blue-50 p-4 rounded-lg mb-3 border-l-4 border-blue-400 shadow-sm"
        >
          <View className="flex-row items-center mb-1">
            <ThemedText className="text-xl font-bold text-blue-800 mr-2">
              {word.japanese}
            </ThemedText>
            <ThemedText className="text-sm text-blue-600 italic">
              ({word.romaji})
            </ThemedText>
          </View>
          <ThemedText className="text-base text-gray-700 mb-1">
            {word.vietnamese}
          </ThemedText>
          <ThemedText className="text-sm text-gray-500 italic">
            V√≠ d·ª•: {word.example}
          </ThemedText>
        </View>
      ))}
    </View>
  );

  const renderGrammarContent = () => (
    <View className="mb-4">
      {/* <ThemedText className="text-lg font-semibold text-gray-700 mb-3">
        üìù {lessonContent.grammar.title}
      </ThemedText> */}
      {lessonContent.grammar.points.map((point: any, index: number) => (
        <View
          key={index}
          className="bg-sky-50 p-4 rounded-lg mb-3 border-l-4 border-sky-400 shadow-sm"
        >
          <ThemedText className="text-lg font-semibold text-sky-800 mb-2">
            {point.title}
          </ThemedText>
          <ThemedText className="text-base text-gray-700 mb-2 leading-relaxed">
            {point.explanation}
          </ThemedText>
          <View className="bg-sky-100 p-3 rounded-md mt-1">
            <ThemedText className="text-sm text-sky-700 font-medium mb-1">
              C·∫•u tr√∫c: {point.pattern}
            </ThemedText>
            <ThemedText className="text-sm text-sky-800 italic">
              V√≠ d·ª•: {point.example}
            </ThemedText>
          </View>
        </View>
      ))}
    </View>
  );

  const renderKanjiContent = () => (
    <View className="mb-4">
      {/* <ThemedText className="text-lg font-semibold text-gray-700 mb-3">
        üàØ {lessonContent.kanji.title}
      </ThemedText> */}
      {lessonContent.kanji.characters.map((char: any, index: number) => (
        <View
          key={index}
          className="bg-amber-50 p-4 rounded-lg mb-3 border-l-4 border-amber-400 shadow-sm"
        >
          <View className="flex-row items-center mb-2">
            <ThemedText className="text-4xl font-bold text-amber-800 mr-4">
              {char.kanji}
            </ThemedText>
            <View className="flex-1">
              <ThemedText className="text-lg font-semibold text-amber-800">
                {char.meaning}
              </ThemedText>
              <ThemedText className="text-sm text-amber-600 italic">
                ({char.reading})
              </ThemedText>
            </View>
          </View>
          <View className="mt-1 space-y-1">
            {char.examples.map((example: any, idx: number) => (
              <ThemedText key={idx} className="text-sm text-amber-700">
                „Éª {example}
              </ThemedText>
            ))}
          </View>
        </View>
      ))}
    </View>
  );

  // --- Main Component Return ---
  return (
    <HomeLayout>
      <ScrollView
        className="flex-1 px-4 pt-4" // Add padding
        showsVerticalScrollIndicator={false}
        contentContainerStyle={{ paddingBottom: 100 }} // Ensure space for final button
      >
        {/* Header */}
        <View className="mb-6">
          <TouchableOpacity
            onPress={() => router.back()}
            className="flex-row items-center mb-4 active:opacity-70"
          >
            <IconSymbol name="chevron.left" size={22} color="#3b82f6" />
            <ThemedText className="text-base text-blue-500 ml-1 font-medium">
              Quay l·∫°i
            </ThemedText>
          </TouchableOpacity>

          <ThemedText type="title" className="text-3xl text-center text-gray-800 font-bold mb-1">
            {lesson?.title || "B√†i h·ªçc"}
          </ThemedText>
          {/* Optional: Add lesson description or level */}
          {/* <ThemedText className="text-center text-gray-500 mb-4">
            {lesson?.description || "N·ªôi dung chi ti·∫øt b√†i h·ªçc"}
          </ThemedText> */}
        </View>

        {/* --- Lesson Sections --- */}
        {/* Part 1: Vocabulary */}
        <View className="mb-6">
          <View className="flex-row justify-between items-center mb-4">
            <ThemedText type="subtitle" className="text-xl font-semibold text-gray-700">
              <IconSymbol name="book.closed" size={20} color="#3b82f6" style={{ marginRight: 6 }}/>
              T·ª´ v·ª±ng
            </ThemedText>
            <TouchableOpacity
              className="bg-blue-500 py-2 px-4 rounded-full flex-row items-center active:bg-blue-600"
              onPress={handleTestVocabulary}
            >
               <IconSymbol name="pencil.and.scribble" size={14} color="#ffffff" style={{ marginRight: 4 }}/>
              <ThemedText className="text-white text-sm font-medium">
                Ki·ªÉm tra
              </ThemedText>
            </TouchableOpacity>
          </View>
          <View className="bg-white rounded-xl p-4 shadow-md">
            {renderVocabularyContent()}
          </View>
        </View>

        {/* Part 2: Grammar */}
        <View className="mb-6">
           <View className="flex-row justify-between items-center mb-4">
            <ThemedText type="subtitle" className="text-xl font-semibold text-gray-700">
              <IconSymbol name="pencil.line" size={20} color="#0ea5e9" style={{ marginRight: 6 }}/>
              Ng·ªØ ph√°p
            </ThemedText>
            <TouchableOpacity
              className="bg-sky-500 py-2 px-4 rounded-full flex-row items-center active:bg-sky-600"
              onPress={handleTestGrammar}
            >
               <IconSymbol name="pencil.and.scribble" size={14} color="#ffffff" style={{ marginRight: 4 }}/>
              <ThemedText className="text-white text-sm font-medium">
                 Ki·ªÉm tra
              </ThemedText>
            </TouchableOpacity>
          </View>
          <View className="bg-white rounded-xl p-4 shadow-md">
            {renderGrammarContent()}
          </View>
        </View>

        {/* Part 3: Kanji */}
        <View className="mb-8">
           <View className="flex-row justify-between items-center mb-4">
            <ThemedText type="subtitle" className="text-xl font-semibold text-gray-700">
             <IconSymbol name="character.book.closed.fill" size={20} color="#f59e0b" style={{ marginRight: 6 }}/>
              Kanji
            </ThemedText>
            <TouchableOpacity
              className="bg-amber-500 py-2 px-4 rounded-full flex-row items-center active:bg-amber-600"
              onPress={handleTestKanji}
            >
               <IconSymbol name="pencil.and.scribble" size={14} color="#ffffff" style={{ marginRight: 4 }}/>
              <ThemedText className="text-white text-sm font-medium">
                 Ki·ªÉm tra
              </ThemedText>
            </TouchableOpacity>
          </View>
          <View className="bg-white rounded-xl p-4 shadow-md">
            {renderKanjiContent()}
          </View>
        </View>

        {/* Final Test Button */}
        <View className="items-center mb-6">
          <TouchableOpacity
            className="bg-green-500 py-4 px-8 rounded-xl flex-row items-center shadow-lg active:bg-green-600"
            onPress={handleFinalTest}
          >
            <IconSymbol name="checkmark.seal.fill" size={20} color="#ffffff" style={{ marginRight: 8 }}/>
            <ThemedText className="text-white text-lg font-bold">
              B√†i ki·ªÉm tra T·ªïng h·ª£p
            </ThemedText>
          </TouchableOpacity>
        </View>
      </ScrollView>

    </HomeLayout>
  );
};

export default LessonDetailScreen;
